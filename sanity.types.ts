// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
>;

export type Categoryoption = {
  _type: "categoryoption";
  title?: string;
  question?: string;
};

export type Response = {
  _type: "response";
  name?: string;
  email?: string;
  question?: string;
  response?: string;
  createdAt?: string;
};

export type Suggestion = {
  _id: string;
  _type: "suggestion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  goal?: string;
  options?: Array<
    {
      _key: string;
    } & Categoryoption
  >;
  responses?: Array<
    {
      _key: string;
    } & Response
  >;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alttext?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  excerpt?: string;
  publishedAt?: string;
  body?: BlockContent;
  featured?: boolean;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  keywords?: Array<string>;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  navigation?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | BlockContent
  | Categoryoption
  | Response
  | Suggestion
  | Post
  | Author
  | Category
  | Page
  | Slug
  | SiteSettings
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/utils/queries.ts
// Variable: author
// Query: {    ...  }
export type AuthorResult = never;
// Variable: post
// Query: {    ...,    categories[]->{        title,        slug    },    "readTime":round(length(pt::text(body)) / 5 / 180 ),    author->{    ...  },  }
export type PostResult = never;
// Variable: postsQuery
// Query: {      "featuredPosts": *[_type == 'post' && featured == true] | order(publishedAt desc){    ...,    categories[]->{        title,        slug    },    "readTime":round(length(pt::text(body)) / 5 / 180 ),    author->{    ...  },  },      "posts": *[_type == 'post' && featured != true] | order(publishedAt desc){    ...,    categories[]->{        title,        slug    },    "readTime":round(length(pt::text(body)) / 5 / 180 ),    author->{    ...  },  }}
export type PostsQueryResult = {
  featuredPosts: Array<{
    _id: string;
    _type: "post";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    author: {
      _id: string;
      _type: "author";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      bio?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
    } | null;
    mainImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alttext?: string;
      _type: "image";
    };
    categories: Array<{
      title: string | null;
      slug: Slug | null;
    }> | null;
    excerpt?: string;
    publishedAt?: string;
    body?: BlockContent;
    featured?: boolean;
    readTime: number;
  }>;
  posts: Array<{
    _id: string;
    _type: "post";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    author: {
      _id: string;
      _type: "author";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      bio?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
    } | null;
    mainImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alttext?: string;
      _type: "image";
    };
    categories: Array<{
      title: string | null;
      slug: Slug | null;
    }> | null;
    excerpt?: string;
    publishedAt?: string;
    body?: BlockContent;
    featured?: boolean;
    readTime: number;
  }>;
};
// Variable: allPostsQuery
// Query: *[_type == 'post'] | order(publishedAt desc){    ...,    categories[]->{        title,        slug    },    "readTime":round(length(pt::text(body)) / 5 / 180 ),    author->{    ...  },  }
export type AllPostsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alttext?: string;
    _type: "image";
  };
  categories: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
  excerpt?: string;
  publishedAt?: string;
  body?: BlockContent;
  featured?: boolean;
  readTime: number;
}>;
// Variable: postQuery
// Query: *[_type == 'post' && slug.current == $slug][0]{    ...,    categories[]->{        title,        slug    },    "readTime":round(length(pt::text(body)) / 5 / 180 ),    author->{    ...  },  }
export type PostQueryResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alttext?: string;
    _type: "image";
  };
  categories: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
  excerpt?: string;
  publishedAt?: string;
  body?: BlockContent;
  featured?: boolean;
  readTime: number;
} | null;
// Variable: suggestionsQuery
// Query: *[_type == 'suggestion']{  ...  }
export type SuggestionsQueryResult = Array<{
  _id: string;
  _type: "suggestion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  goal?: string;
  options?: Array<
    {
      _key: string;
    } & Categoryoption
  >;
  responses?: Array<
    {
      _key: string;
    } & Response
  >;
}>;

declare module "@sanity/client" {
  interface SanityQueries {
    "{\n    ...\n  }": AuthorResult;
    '{\n    ...,\n    categories[]->{\n        title,\n        slug\n    },\n    "readTime":round(length(pt::text(body)) / 5 / 180 ),\n    author->{\n    ...\n  },\n  }': PostResult;
    '{\n      "featuredPosts": *[_type == \'post\' && featured == true] | order(publishedAt desc){\n    ...,\n    categories[]->{\n        title,\n        slug\n    },\n    "readTime":round(length(pt::text(body)) / 5 / 180 ),\n    author->{\n    ...\n  },\n  },\n      "posts": *[_type == \'post\' && featured != true] | order(publishedAt desc){\n    ...,\n    categories[]->{\n        title,\n        slug\n    },\n    "readTime":round(length(pt::text(body)) / 5 / 180 ),\n    author->{\n    ...\n  },\n  }\n}': PostsQueryResult;
    "*[_type == 'post'] | order(publishedAt desc){\n    ...,\n    categories[]->{\n        title,\n        slug\n    },\n    \"readTime\":round(length(pt::text(body)) / 5 / 180 ),\n    author->{\n    ...\n  },\n  }": AllPostsQueryResult;
    " *[_type == 'post' && slug.current == $slug][0]{\n    ...,\n    categories[]->{\n        title,\n        slug\n    },\n    \"readTime\":round(length(pt::text(body)) / 5 / 180 ),\n    author->{\n    ...\n  },\n  }": PostQueryResult;
    "*[_type == 'suggestion']{\n  ...\n  }": SuggestionsQueryResult;
  }
}
